import{_ as s,c as a,o as n,a as l}from"./app.2b289b3c.js";const A=JSON.parse('{"title":"Persistent Data","description":"","frontmatter":{},"headers":[{"level":2,"title":"Saving data","slug":"saving-data"},{"level":2,"title":"Reading data","slug":"reading-data"},{"level":2,"title":"Deleting data","slug":"deleting-data"}],"relativePath":"docs/modules/persistent-data.md","lastUpdated":1661814773000}'),e={name:"docs/modules/persistent-data.md"},p=l(`<h1 id="persistent-data" tabindex="-1">Persistent Data <a class="header-anchor" href="#persistent-data" aria-hidden="true">#</a></h1><p>Laravel&#39;s config files are a great way to store static values that rarely, if ever change. However, this isn&#39;t a flexible solution when storing mutable data that can be modified at any time via the administration panel.</p><p>Instead of saving all the persistent values into the cache, that risks being cleared whenever the cache is cleared (making the data not so persistent after all). LCFramework takes a different approach by providing a driver based API to storing these settings. Currently, there are two drivers officially supported:</p><ul><li>File <code>(default)</code></li><li>Database</li></ul><p>The file and database drivers serve two different scenarios. The file-based driver is enabled by default, and is generally the fastest solution at reading and writing persistent data. However, the file-based driver reads all the persistent settings into memory, on every request. This isn&#39;t usually an issue when small and simple data structures are used, but if you intend on storing large data structures, the database driver provides an alternative solution that can be more memory-efficient at the cost of speed.</p><h2 id="saving-data" tabindex="-1">Saving data <a class="header-anchor" href="#saving-data" aria-hidden="true">#</a></h2><div class="language-php"><button class="copy"></button><span class="lang">php</span><pre><code><span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">LCFramework</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Framework</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Setting</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Facade</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Settings</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// We provide a key (that&#39;s used to identify the data)</span></span>
<span class="line"><span style="color:#676E95;">// and we provide a value, the value can be of any type</span></span>
<span class="line"><span style="color:#FFCB6B;">Settings</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">put</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">example.array</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">example-data-value</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">]);</span></span>
<span class="line"><span style="color:#FFCB6B;">Settings</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">put</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">example.string</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">example-data-value</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#FFCB6B;">Settings</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">put</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">example.integer</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1234</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// Alternatively, we can use the global helpers</span></span>
<span class="line"><span style="color:#82AAFF;">settings</span><span style="color:#89DDFF;">()-&gt;</span><span style="color:#82AAFF;">put</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">key</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// or</span></span>
<span class="line"><span style="color:#82AAFF;">settings_put</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">key</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><h2 id="reading-data" tabindex="-1">Reading data <a class="header-anchor" href="#reading-data" aria-hidden="true">#</a></h2><div class="language-php"><button class="copy"></button><span class="lang">php</span><pre><code><span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">LCFramework</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Framework</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Setting</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Facade</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Settings</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">Settings</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">example.array</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// [&#39;example-data-value&#39;]</span></span>
<span class="line"><span style="color:#FFCB6B;">Settings</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">example.string</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// &#39;example-data-value&#39;;</span></span>
<span class="line"><span style="color:#FFCB6B;">Settings</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">example.integer</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 1234;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// Alternatively, we can use the global helpers</span></span>
<span class="line"><span style="color:#82AAFF;">settings</span><span style="color:#89DDFF;">()-&gt;</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">key</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// &#39;value&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// or</span></span>
<span class="line"><span style="color:#82AAFF;">settings</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">key</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// or</span></span>
<span class="line"><span style="color:#82AAFF;">settings_get</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">key</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// We can even use dot-notation to get a group of settings by their namespace</span></span>
<span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">settings </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">settings</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">example</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">/**</span></span>
<span class="line"><span style="color:#676E95;"> * $settings = [</span></span>
<span class="line"><span style="color:#676E95;"> *     &#39;array&#39; =&gt;  [&#39;example-data-value&#39;],</span></span>
<span class="line"><span style="color:#676E95;"> *     &#39;string&#39; =&gt; &#39;example-data-value&#39;,</span></span>
<span class="line"><span style="color:#676E95;"> *     &#39;integer&#39; =&gt; 1234</span></span>
<span class="line"><span style="color:#676E95;"> * ];</span></span>
<span class="line"><span style="color:#676E95;"> */</span></span>
<span class="line"><span style="color:#82AAFF;">dd</span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">settings</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><h2 id="deleting-data" tabindex="-1">Deleting data <a class="header-anchor" href="#deleting-data" aria-hidden="true">#</a></h2><div class="language-php"><button class="copy"></button><span class="lang">php</span><pre><code><span class="line"><span style="color:#F78C6C;">use</span><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;">LCFramework</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Framework</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Setting</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Facade</span><span style="color:#89DDFF;">\\</span><span style="color:#A6ACCD;">Settings</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">Settings</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">forget</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">example.array</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// [&#39;example-data-value&#39;]</span></span>
<span class="line"><span style="color:#FFCB6B;">Settings</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">forget</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">example.string</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// &#39;example-data-value&#39;;</span></span>
<span class="line"><span style="color:#FFCB6B;">Settings</span><span style="color:#89DDFF;">::</span><span style="color:#82AAFF;">forget</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">example.integer</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// 1234;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// Alternatively, we can use the global helpers</span></span>
<span class="line"><span style="color:#82AAFF;">settings</span><span style="color:#89DDFF;">()-&gt;</span><span style="color:#82AAFF;">forget</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">key</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;">// &#39;value&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// or</span></span>
<span class="line"><span style="color:#82AAFF;">settings_forget</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">key</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;">// We can even use dot-notation to forget a group of settings by their namespace</span></span>
<span class="line"><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">settings </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">settings</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">example</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div>`,11),o=[p];function t(r,c,F,D,y,i){return n(),a("div",null,o)}const C=s(e,[["render",t]]);export{A as __pageData,C as default};
